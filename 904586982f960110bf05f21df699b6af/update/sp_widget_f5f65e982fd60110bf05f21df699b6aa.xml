<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope, spUtil, $timeout) {
	/* widget controller */
	var c = this;
	$scope.grayList = [];
	$scope.showHint = false;

	// Position cursor at 0,0 on startup
	// Close the console window or you'll start drinking earlier
	$scope.init = function() {
		$timeout(function () {
			console.log('waiting...');
			var cellID = 'letter_0_0';
			console.log('cellID=' + cellID);
			document.getElementById(cellID).focus();
		}, 100);
	}

	$scope.reverseHint = function() {
		$scope.showHint = !$scope.showHint;
	}

	$scope.getNextWord = function() {
		// console.log('click');
		c.data.currentWord = c.data.wordList.shift();
		$scope.grayList = [];
		// Enable the first row for the new word
		c.data.currentWord.attempts[0].disabled = false;
		// Reset the row counter back to the top
		c.data.attemptCount = 0;
		$scope.showHint = false;
		c.data.showURL = false;
	}

	// TODO: BUG - Each successive word gets 1 fewer attempts than previous word
	// 2022-06-15: Advance the cursor after each letter
	// 2022-06-15: Only allow letters (no numbers, symbols, emojis)
	// 2022-08-10: Get the first word by default
	// 2022-08-10: Disable the submit button until all letters are entered
	// 2022-08-10: Disable all rows except attemptCount
	// 2022-08-10: Learn when to finish (all letters are green)
	// 2022-08-10: Display the hint at the top of the screen
	// 2022-10-27: Added list of invalid letters
	// 2023-01-24: Add a (docs) URL to the word record and display the link when game over
	// 2023-01-24: Auto place focus on element 0 on new rows
	// 2023-01-24: What are we doing with the Attempts table? (we nuked it)
	// 2023-01-24: When you get to the end, if not successful, show answer

	$scope.checkWord = function() {

		var wordLen = c.data.currentWord.text.length;
		var guessedWord = "";
		var attemptObj = {};
		var color = [];
		var letterList = [];

		for (var i = 0; i < wordLen; i++) {

			// States: Green - Right letter, right position
			//         Yellow - Right letter, wrong position
			//         Gray - What the F*** were you smoking?!

			var myColor = '#ccc';
			var letter = c.data.currentWord.text[i];
			// Is this a letter?
			if (c.data.currentWord.meta[i].isLetter) {

				// Pass 1: Is this letter correct and in the right position?
				var index = 'letter_' + c.data.attemptCount + '_' + i;
				var letterN = document.getElementById(index).value.toString().toUpperCase();
				guessedWord += letterN;
				// console.log('>>>DEBUG: letterN=' + letterN);
				if (letterN == letter) {
					// console.log('>>>DEBUG: Right letter, right pos ' + letterN);
					myColor = 'green';
				} else if (c.data.currentWord.text.indexOf(letterN) >= 0) {
					// Pass 2: Is this letter correct and in the wrong position?
					// console.log('>>>DEBUG: Right letter, wrong position ' + letterN);
					myColor = 'yellow';
				} else {
					// Check if the letter is already in the list
					var list = $scope.grayList;
					if (list.indexOf(letterN) == -1) {
						list.push(letterN);
						$scope.grayList = list.sort();
					}
				}
				letterList[i] = letterN;
				color.push(myColor);
				// document.getElementById(index).style.foo = 'green';
				// console.log('>>>DEBUG: index=' + index + ' myColor=' + myColor + ' letterN=' + letterN)
			} else {
				guessedWord += c.data.currentWord.text[i];
				color.push('green'); // Dharmit said so
			}

		}

		// Populate c.data.currentWord.attempt[i]

		attemptObj.guessedWord = guessedWord;
		attemptObj.color = color;
		attemptObj.disabled = true;
		attemptObj.letter = letterList;
		c.data.submitDisabled = true;
		c.data.currentWord.attempts[c.data.attemptCount] = attemptObj;
		// console.table(c.data.currentWord.attempts[c.data.attemptCount], ["guessedWord", "disabled"]);
		// Check if the game over
		c.data.gameOver = gameOver();
		c.data.attemptCount++;
		// console.log('wordList.length=' + c.data.wordList.length);
		if (c.data.attemptCount >= c.data.wordList.length) {
			c.data.gameOver = true;
			spUtil.addErrorMessage('LOSER!');
		} else {
			if (c.data.gameOver) {
				spUtil.addTrivialMessage('Good job!')
				// console.log("Good job!");
			} else {
				// Enable the current row
				c.data.currentWord.attempts[c.data.attemptCount].disabled = false;		
				$timeout(function () {
					// Set focus to first cell in the new row
					var focusID = 'letter_' + c.data.attemptCount + '_0';
					//console.log(focusID);
					document.getElementById(focusID).focus();
				}, 100);

			}
		}

		if (c.data.gameOver) {
			c.data.showURL = true;
		}
	}

	$scope.letterEntered = function(ev, current) {

		var myLocStr = current.$$watchers[current.$$watchersCount - 1].last;
		var myPos = myLocStr.replace('letter_', '').split('_');
		var myRow = parseInt(myPos[0], 10);
		var myCol = parseInt(myPos[1], 10);
		// console.log('keyCode=' + ev.keyCode);
		// console.log('current=' , current);

		if (ev.keyCode >= 65 && ev.keyCode <= 90) {
			var letter = ev.key.toUpperCase();
			// Is the letter NOT in the list of bad letters?
			if ($scope.grayList.indexOf(letter) == -1) {
				// console.log('good letter: ' + letter);
				document.getElementById(myLocStr).value = letter;
				c.data.currentWord.attempts[c.data.attemptCount].letter[myCol] = letter;
				// console.log('myCol=' + myCol + ' isLetter=' + c.data.currentWord.meta[myCol].isLetter);
				// console.log('len=' + c.data.currentWord.text.length);
				if (myCol+1 < c.data.currentWord.text.length) {
					if (c.data.currentWord.meta[myCol+1].isLetter) {
						myCol++;
					} else {
						myCol += 2;
					}
					// console.log('...myCol=' + myCol);
					var nextFieldID = 'letter_' + myRow + '_' + myCol;
					document.getElementById(nextFieldID).focus();
				}
			}  else {
				// console.log('bad letter: ' + letter);

				// Erase the bad letter and let them try again
				document.getElementById(myLocStr).value = "";
				c.data.currentWord.attempts[c.data.attemptCount].letter[myCol] = "";

			}
		} else {
			console.log('invalid keyCode: ' + ev.keyCode);

			document.getElementById(myLocStr).value = "";
			c.data.currentWord.attempts[c.data.attemptCount].letter[myCol] = "";
		}

		c.data.submitDisabled = !currentRowFilled();
		//console.log(ev);
	}

	function gameOver() {

		var currentWordText = c.data.currentWord.text;
		var attemptCount = c.data.attemptCount;
		var guessedWord = c.data.currentWord.attempts[attemptCount].guessedWord;

		return currentWordText === guessedWord;
	}

	function currentRowFilled() {

		var wordLen = c.data.currentWord.text.length;

		for (var i = 0; i < wordLen; i++) {
			var letter = c.data.currentWord.attempts[c.data.attemptCount].letter[i];
			var isLetter = c.data.currentWord.meta[i].isLetter;

			// console.log('letter=' + letter + ' isLetter=' + isLetter);
			if (isLetter && letter == "") {
				return false;
			}
		}

		return true;

	}

	$scope.paste = function() {
		console.log('eat paste');
	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>swordle</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>swordle</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	// Fix this later
	var sessionID = $sp.getParameter('session');
	var wordList = new Util().getWordList(sessionID);

	data.wordList = wordList;
	data.currentWord = data.wordList.shift();
	data.attemptCount = 0;
	data.currentWord.attempts[0].disabled = false;
	data.submitDisabled = true;
	data.gameOver = false;
	data.showURL = false;
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-13 21:42:23</sys_created_on>
        <sys_id>f5f65e982fd60110bf05f21df699b6aa</sys_id>
        <sys_mod_count>223</sys_mod_count>
        <sys_name>swordle</sys_name>
        <sys_package display_value="SWordle" source="x_788884_swordle">904586982f960110bf05f21df699b6af</sys_package>
        <sys_policy/>
        <sys_scope display_value="SWordle">904586982f960110bf05f21df699b6af</sys_scope>
        <sys_update_name>sp_widget_f5f65e982fd60110bf05f21df699b6aa</sys_update_name>
        <sys_updated_by>chuck.tomasi</sys_updated_by>
        <sys_updated_on>2023-01-25 02:06:15</sys_updated_on>
        <template><![CDATA[<div>
  <div ng-if="showHint">
    {{c.data.currentWord.hint}}
  </div>
  <div ng-if="!showHint" ng-click="reverseHint()">
    <button class="btn btn-danger">
      Show Hint
    </button>
  </div>

  <div ng-repeat="att in c.data.currentWord.attempts">
    <span ng-repeat="item in c.data.currentWord.meta">
      <span ng-if="item.isLetter">
        <input type="text"
               id="{{'letter_' + $parent.$parent.$index + '_' + $index}}"
               size="1"
               ng-keyup="letterEntered($event, this)"
               ng-paste="paste()"
               ng-pattern="/^[a-zA-Z]$/"
               maxlength="1"
               ng-disabled="att.disabled"
               value="{{att.letter[$index]}}"
               style="background-color:{{att.color[$index]}}; color:black">
      </span>
      <span ng-if="!item.isLetter">&nbsp;{{c.data.currentWord.text[$index]}}&nbsp;</span>
      &nbsp;
    </span>
  </div>
  <div ng-if="c.data.showURL">
    <a href="{{c.data.currentWord.url}}" target="_blank">{{c.data.currentWord.text}}</a>
  </div>

  <div class="btn btn-info"
       ng-disabled="c.data.submitDisabled"
       ng-click="checkWord()"
       >
    ${Submit}
  </div>

  <div class="btn btn-primary"
       ng-if="c.data.wordList.length > 0"
       ng-click="getNextWord()">
    Next word!
  </div>
  <div ng-init="init()"></div>

  <pre>{{c.data.currentWord | json }}</pre>

</div>]]></template>
    </sp_widget>
</record_update>
